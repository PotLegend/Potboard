{"version":3,"sources":["Components/myUrlField.js","Components/users.js","Components/posts.js","Components/Dashboard.js","Components/authProvider.js","Components/comments.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","link","textDecoration","icon","width","paddingLeft","MyUrlField","record","source","classes","href","className","UserList","props","List","Datagrid","rowClick","TextField","EmailField","PostTitle","title","postRowStyle","index","backgroundColor","nb_views","PostList","isSmall","useMediaQuery","theme","breakpoints","down","filters","SimpleList","primaryText","secondaryText","views","tertiaryText","Date","published_at","toLocaleDateString","rowStyle","perPage","ReferenceField","label","reference","EditButton","PostEdit","Edit","SimpleForm","ReferenceInput","SelectInput","optionText","TextInput","multiline","PostCreate","Create","PostShow","Show","SimpleShowLayout","RichTextField","DateField","PostFilter","Filter","alwaysOn","allowEmpty","Card","CardHeader","CardContent","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","cardStyle","minHeight","margin","display","verticalAlign","CommentGrid","useListContext","ids","data","basePath","style","map","id","subheader","avatar","Avatar","resource","CardActions","textAlign","CommentList","CommentTitle","CommentEdit","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","authProvider","Resource","name","list","UserIcon","options","show","edit","create","PostIcon","MessageIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad8c1280.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\n// We will build a react hook by using makeStyles\n\nconst useStyles  = makeStyles({\n    link: {\n        textDecoration: 'none',\n    },\n    icon: {\n        width: '0.5em',\n        paddingLeft: 2,\n    },\n});\n\nconst MyUrlField = ({ record = {}, source }) => {\n    const classes = useStyles();\n    \n    return(\n        <a href={record[source]} className={classes.link}>\n            {record[source]}\n        <LaunchIcon className={classes.icon} />\n\n    </a>\n    );\n}\n    \n\n\nexport default MyUrlField;","import * as React from \"react\";\nimport { List, Datagrid, TextField, EmailField } from 'react-admin';\nimport MyUrlField from './myUrlField';\n\n\nexport const UserList = props =>(\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <EmailField source=\"email\" />\n            <TextField source=\"phone\" />\n            <MyUrlField  source=\"website\" />\n            <TextField source=\"company.name\" />\n        </Datagrid>\n    </List>\n);\n\n","import * as React from \"react\";\nimport { \n    List,\n    Show,\n    Datagrid,\n    TextField,\n    ReferenceField,\n    EditButton,\n    Edit,\n    Create,\n    SimpleForm,\n    ReferenceInput,\n    SelectInput,\n    TextInput,\n    SimpleList,\n    RichTextField, \n    DateField,\n    Filter,\n    SimpleShowLayout,\n} from 'react-admin';\n\nimport { useMediaQuery } from '@material-ui/core';\n\nconst PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nconst postRowStyle = (record, index) => ({\n    backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n});\n\n\nexport const PostList = (props) => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n\n   \n    return (\n        <List filters={<PostFilter />} {...props} >\n            {isSmall ? (\n                <SimpleList\n                    primaryText={record => record.title}\n                    secondaryText={record => `${record.views} views`}\n                    tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n                    rowStyle={postRowStyle}\n                />\n            ) : (\n                <Datagrid perPage={25} >\n                    <TextField source=\"id\" />\n                    <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n                        <TextField source=\"name\" />\n                    </ReferenceField>\n                    <TextField source=\"title\" />\n                    <TextField source=\"body\" />\n                    <EditButton />\n                </Datagrid>\n            )}\n        </List>\n    );\n}\n\n\nexport const PostEdit = props =>(\n    <Edit title={<PostTitle/>} {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"id\" />\n            <TextInput source=\"title\" />\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const PostCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Create>\n);\n\nexport const PostShow = (props) => (\n    <Show title=\"Post view\" {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"title\" />\n            <TextField source=\"teaser\" />\n            <RichTextField source=\"body\" />\n            <DateField label=\"Publication date\" source=\"created_at\" />\n        </SimpleShowLayout>\n    </Show>\n);\n\n\nconst PostFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\n       <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\n            <SelectInput optionText=\"name\" />\n     </ReferenceInput>\n    </Filter>\n);\n\n// The first filter, ‘q’, takes advantage of a full-text functionality offered by JSONPlaceholder.\n// It is alwaysOn, so it always appears on the screen. Users can add the second filter, userId, thanks \n// to the “add filter” button, located on the top of the list.\n// As it’s a <ReferenceInput>, it’s already populated with possible users.\n\n","import * as React from \"react\";\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\n\n\n// By default, react-admin displays the list page of the first \n// Resource element as home page. If you want to display a custom \n// component instead, pass it in the dashboard prop of the <Admin> component.\n\nexport default () => (\n    <Card>\n        <CardHeader title=\"Wellcome to the administration\" />\n        <CardContent>Lorem Ispum sic dolor amet...</CardContent>\n    </Card>\n);\n","export default {\n    // called when the user attempts to log in\n    login: ({ username }) => {\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};\n\n// As the authProvider calls are asynchronous, you can easily fetch an authentication server in there.","import * as React from 'react';\nimport { \n    useListContext, \n    List,\n    TextField, \n    DateField, \n    ReferenceField, \n    EditButton,\n    SimpleForm,\n    ReferenceInput,\n    SelectInput,\n    TextInput,\n    Edit, } from 'react-admin';\nimport { Card, CardActions, CardContent, CardHeader, Avatar } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\n\nconst cardStyle = {\n    width: 350,\n    minHeight: 300,\n    margin: '0.5em',\n    display: 'inline-block',\n    verticalAlign: 'top'\n};\n\nconst CommentGrid = () => {\n    const { ids, data, basePath } = useListContext();\n    return (\n        <div style={{ margin: '4em' }}>\n        {ids.map(id =>\n            <Card key={id} style={cardStyle}>\n                <CardHeader\n                    title={<TextField record={data[id]} source=\"author.name\" />}\n                    subheader={<DateField record={data[id]} source=\"created_at\" />}\n                    avatar={<Avatar icon={<PersonIcon />} />}\n                />\n                <CardContent>\n                    <TextField record={data[id]} source=\"body\" />\n                </CardContent>\n                <CardContent>\n                    about&nbsp;\n                    <ReferenceField label=\"Post\" resource=\"comments\" record={data[id]} source=\"post_id\" reference=\"posts\" basePath={basePath}>\n                        <TextField source=\"title\" />\n                    </ReferenceField>\n                </CardContent>\n                <CardActions style={{ textAlign: 'right' }}>\n                    <EditButton resource=\"posts\" basePath={basePath} record={data[id]} />\n                </CardActions>\n            </Card>\n        )}\n        </div>\n    );\n};\n\nexport const CommentList = (props) => (\n    <List title=\"All comments\" {...props}>\n        <CommentGrid />\n    </List>\n);\n\n\nconst CommentTitle = ({ record }) => {\n    return <span>Comments {record ? `\"${record.title}\"` : ''}</span>;\n};\n\n\nexport const CommentEdit = props =>(\n    <Edit title={<CommentTitle/>} {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"author.name\" />\n            </ReferenceInput>\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Edit>\n);","import * as React from \"react\";\nimport { Admin, Resource } from 'react-admin';\nimport { UserList } from './Components/users';\nimport { PostList, PostEdit, PostCreate, PostShow} from './Components/posts';\nimport jsonServerProvider from 'ra-data-json-server';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/People';\nimport MessageIcon from '@material-ui/icons/Message';\nimport Dashboard from './Components/Dashboard';\nimport authProvider from './Components/authProvider';\nimport {CommentList, CommentEdit} from './Components/comments';\n\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n\n\n\n\nconst App = () => (\n        <Admin dashboard={Dashboard} authProvider={authProvider} dataProvider={dataProvider}>\n          <Resource name=\"users\" list={UserList} icon={UserIcon} />\n          <Resource name=\"posts\" options={{ label: 'Posts' }} list={PostList} show={PostShow} edit={PostEdit}  create={PostCreate}  icon={PostIcon} />\n          <Resource name=\"comments\" list={CommentList} icon={MessageIcon} edit={CommentEdit}  />\n        </Admin>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}